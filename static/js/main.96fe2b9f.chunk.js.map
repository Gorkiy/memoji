{"version":3,"sources":["components/CardFront.js","components/CardBack.js","components/Card.js","components/TimeLimit.js","utils/gif-api.js","components/GameResults.js","components/App.js","serviceWorker.js","index.js"],"names":["CardFront","matchedStyle","this","props","isMatched","react_default","a","createElement","className","concat","onClick","cardFace","Component","CardBack","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isFlipped","handleClick","bind","assertThisInitialized","prevProps","exposed","exposedCount","gameEnded","flip","gameStarted","setState","setTimeout","prevState","react_card_flip_default","flipDirection","components_CardFront","key","components_CardBack","TimeLimit","timeLeft","Gif","query","limit","gif","url","fetch","response","json","data","imageNum","getRandomImage","getGIFs","images","img","alt","gifURL","src","Math","floor","random","GameResults","getGif","onButtonClick","outcome","win","setGifURL","fail","renderOutcome","type","gameConfig","totalCards","cards","timeLimit","App","cardsLeft","faces","shuffle","cardsData","exposedCards","initNewGame","_callee","regenerator_default","wrap","_context","prev","next","getCardsData","sent","getCardComponents","stop","onCardClick","_callee2","card","first","second","_context2","runGame","push","markAsExposed","id","markAsMatched","switchExposed","_callee3","_context3","update","cardFaces","i","length","components_Card","id1","id2","timerId","setInterval","endGame","clearInterval","newData","components_GameResults","components_TimeLimit","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96fe2b9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CardFront extends Component {\n  render() {\n    const matchedStyle = this.props.isMatched ? \"card_matched\" : \"\";\n    return (\n      <div className={`card card_front ${matchedStyle}`} onClick={this.props.onClick}>\n        {this.props.cardFace}\n      </div>\n    );\n  }\n}\n\nexport default CardFront;","import React, { Component } from 'react';\n\nclass CardBack extends Component {\n  \n  render() {\n    return (\n      <div className=\"card card_back\" onClick={this.props.onClick}>\n      </div>\n    );\n  }\n}\n\nexport default CardBack;","import React, { Component } from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    // this.cardRef = React.createRef();\n    this.state = {\n      isFlipped: false\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.exposed && this.props.exposedCount >= 1 && !this.props.gameEnded) {\n      this.flip();\n    }\n    //Triggers when the \"new game\" button is clicked\n    // Flip back all exposed cards for a new match\n    if (!this.props.gameStarted && this.props.gameEnded && this.state.isFlipped) {\n      this.setState({ isFlipped: false });\n    }\n  }\n  \n  flip() {\n    setTimeout(function() {\n      this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n    }.bind(this), 600);\n  }\n  \n  handleClick() {\n    if (!this.state.isFlipped) {\n      this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n      this.props.onClick(this);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"game-field__tile\">        \n        <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"horizontal\">\n          <CardFront key=\"back\" onClick={this.handleClick} cardFace={this.props.cardFace} isMatched={this.props.isMatched}/>\n          <CardBack key=\"front\" onClick={this.handleClick} />\n        </ReactCardFlip>\n      </div>\n    );\n  }\n}\n\nexport default Card;","import React, { Component } from 'react';\n\nclass TimeLimit extends Component {\n  render() {\n    return (\n      <div className=\"time-limit\">\n        {this.props.timeLeft}\n      </div>\n    );\n  }\n}\n\nexport default TimeLimit;","const API = 'Gg8myGJJ00rKTsHqkNwPNlmZsV92EHJB';\nconst searchURL = '//api.giphy.com/v1/gifs/search?q=';\n\nclass Gif {\n  constructor(query, limit) {\n    this.query = query;\n    this.limit = limit;\n    this.gif = null\n  }\n  \n  async getGIFs(query, limit) {\n    const url = searchURL + this.query + '&api_key=' + API + '&limit=' + this.limit;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data['data'];\n  }\n  \n  async setGifURL() {\n    const imageNum = this.getRandomImage();\n    const images = await this.getGIFs(this.query, this.limit);\n    \n    const img = images[imageNum];\n    const url = img['images']['original']['url'];\n    const alt = img['title'];\n    \n    this.gifURL = url;\n    this.gif = {\n      src: url,\n      alt: alt\n    }\n  }\n  \n  getRandomImage() {\n    return Math.floor(this.limit * Math.random());\n  }\n  \n}\n\nexport default Gif;","import React, { Component } from 'react';\nimport Gif from '../utils/gif-api';\n\nclass GameResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameEnded: false,\n      gif: {\n        src: '',\n        alt: ''\n      }\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded === true) {\n      this.setState({ gameEnded: true })\n    }\n    \n    if (this.state.gameEnded) {\n      this.getGif();\n      this.setState({ gameEnded: false })\n    }\n  }\n  \n  handleClick() {\n    this.props.onButtonClick();\n  }\n  \n  renderOutcome() {\n    if (this.props.outcome === 'win' ) {\n      return 'Epic Win!';\n    }\n    \n    if (this.props.outcome === 'lose' ) {\n      return 'Not Epic Win :(';\n    }\n  }\n  \n  async getGif() {\n    let url = '';\n    let alt = '';\n    if (this.props.outcome === 'win' ) {\n      const win = new Gif('win', 10);\n      await win.setGifURL();\n      url = win.gif.src;\n      alt = win.gif.alt;\n    }\n    \n    if (this.props.outcome === 'lose' ) {\n      const fail = new Gif('fail', 10);\n      await fail.setGifURL();\n      url = fail.gif.src;\n      alt = fail.gif.alt;\n    }\n    \n    this.setState({ gif: {\n      src: url,\n      alt: alt\n    }});\n  }\n  \n  render() {\n    const matchedStyle = this.props.gameEnded ? \"modal_show\" : \"\";\n    \n    return (\n      <div className={`modal ${matchedStyle}`}>\n        <div className=\"game-results\">\n          <h2 className=\"game-results__title\">{this.renderOutcome()}</h2>\n          <div className=\"game-results__gif\"><img src={this.state.gif.src} alt={this.state.gif.alt} /></div>\n          <button className=\"game-results__button\" type=\"button\" onClick={this.handleClick}>New Game\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameResults;","import React, { Component } from 'react';\nimport { shuffle } from 'lodash';\nimport Card from './Card';\nimport TimeLimit from './TimeLimit';\nimport GameResults from './GameResults';\n\nconst gameConfig = {\n  totalCards: 12,\n  cards: ['🐶', '🐶', '🐱', '🐱', '🐭', '🐭', '🐹', '🐹', '🐰', '🐰', '🐻', '🐻'],\n  timeLimit: 20\n}\n\nclass App extends Component {\n  state = { \n    gameStarted: false,\n    gameEnded: false,\n    cardsLeft: gameConfig.totalCards,\n    timeLeft: gameConfig.timeLimit,\n    faces: shuffle(gameConfig.cards),\n    cardsData: {},\n    cards: [],\n    exposedCount: 0,\n    exposedCards: [],\n    outcome: ''\n  };\n  \n  componentDidMount() {\n    this.initNewGame();\n  }\n  \n  initNewGame = async () => {\n    this.setState({ gameStarted: false });\n    this.setState({ gameEnded: false });\n    this.setState({ outcome: '' });\n    this.setState({ timeLeft: gameConfig.timeLimit });\n    this.setState({ cardsLeft: gameConfig.totalCards });\n    //Generate new data\n    this.setState({ faces: shuffle(gameConfig.cards) });\n    const data = await this.getCardsData(this.state.faces);\n    this.setState({ cardsData: data });\n    this.setState( { cards: this.getCardComponents(data) });\n  }\n  \n  getCardsData(cardFaces) {\n    let data = {};\n    for (let i = 0; i < cardFaces.length; i++) {\n      data[i] = {\n        id: i,\n        cardFace: cardFaces[i],\n        isMatched: false,\n        exposed: false\n      }\n    }\n    return data;\n  }\n  \n  getCardComponents(data) {\n    let cards = [];\n    for (let key in data) {\n      let card = data[key];\n      cards.push(<Card \n        key={card.id} \n        id={card.id} \n        cardFace={card.cardFace} \n        isMatched={card.isMatched} \n        exposed={card.exposed} \n        onClick={this.onCardClick}\n        exposedCount={this.state.exposedCount}\n        gameStarted={this.state.gameStarted}\n        gameEnded={this.state.gameEnded}\n      />);\n    }\n    return cards;\n  }\n  \n  markAsMatched(id1, id2) {\n    const data = this.state.cardsData;\n    data[id1]['isMatched'] = true;\n    data[id2]['isMatched'] = true;\n    this.setState({ cardsLeft: this.state.cardsLeft - 2 });\n    this.update(data);\n  }\n  \n  markAsExposed(id) {\n    const data = this.state.cardsData;\n    data[id]['exposed'] = true;\n    this.update(data);\n  }\n  \n  switchExposed(id1, id2) {\n    const data = this.state.cardsData;\n    data[id1]['exposed'] = !data[id1]['exposed'];\n    data[id2]['exposed'] = !data[id2]['exposed'];\n    this.update(data);\n  }\n  \n  runGame() {\n    this.setState({ gameStarted: true });\n    const timerId = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0 || this.state.cardsLeft === 0) {\n        this.endGame();\n        clearInterval(timerId);\n      }\n    }.bind(this), 1000);\n  }\n  \n  endGame() {\n    if (this.state.cardsLeft === 0) {\n      this.setState({ outcome: 'win' });\n    } else {\n      this.setState({ outcome: 'lose' });\n    }\n    \n    this.setState({ gameEnded: true });\n    this.setState({ exposedCount: 0 });\n    this.setState({ exposedCards: [] });\n    this.update(this.state.cardsData);\n  }\n  \n  async update(data) {\n    const newData = await this.getCardComponents(data);\n    this.setState( { cards: newData });\n  }\n  \n  onCardClick = async (card) => {\n    if (!this.state.gameStarted && !this.state.gameEnded) {\n      await this.runGame();\n    }\n    \n    this.state.exposedCards.push(card);\n    this.markAsExposed(card.props.id);\n    await this.setState({ exposedCount: this.state.exposedCount + 1 });\n    //Compare exposed cards and check for a match\n    if (this.state.exposedCount === 2) {\n      let first = this.state.exposedCards[0];\n      let second = this.state.exposedCards[1];\n      if (first.props.cardFace === second.props.cardFace)  {\n        this.markAsMatched(first.props.id, second.props.id);\n      } else {\n        this.switchExposed(first.props.id, second.props.id);\n      }\n      this.setState({ exposedCount: 0, exposedCards: [] });\n    }\n  }\n  \n  onButtonClick = async (card) => {\n    //Wait for update in order to flip back exposed cards in previous match\n    await this.setState({ gameStarted: false });\n    await this.update(this.state.cardsData);\n    //Wait for smooth card faces change\n    setTimeout(function() {\n      this.initNewGame();\n    }.bind(this), 200);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"game-name\">Memoji</h1>\n        <GameResults gameEnded={this.state.gameEnded} outcome={this.state.outcome} onButtonClick={this.onButtonClick}/>\n        <div className=\"game-field\">\n          {this.state.cards}\n        </div>\n        <TimeLimit gameStarted={this.state.gameStarted} timeLeft={this.state.timeLeft}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}